{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///Users/robertzhang/Documents/GitHub/robert/app/api/blog/list/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport fs from 'fs';\nimport path from 'path';\n\nexport async function GET() {\n  try {\n    // Path to the blog posts directory\n    const blogsDirectory = path.join(process.cwd(), 'app/blog');\n    \n    // Get all subdirectories (each subdirectory is a blog post)\n    const entries = fs.readdirSync(blogsDirectory, { withFileTypes: true });\n    const directories = entries\n      .filter(entry => entry.isDirectory() && entry.name !== 'components' && !entry.name.startsWith('.'))\n      .map(dir => dir.name);\n    \n    // Array to store blog post metadata\n    const posts = [];\n    \n    // Process each blog post directory\n    for (const slug of directories) {\n      try {\n        const filePath = path.join(blogsDirectory, slug, 'page.tsx');\n        \n        // Check if the file exists\n        if (fs.existsSync(filePath)) {\n          const content = fs.readFileSync(filePath, 'utf8');\n          \n          // Extract title\n          const titleMatch = content.match(/<motion\\.h1[^>]*>([\\s\\S]*?)<\\/motion\\.h1>/);\n          const title = titleMatch ? titleMatch[1].trim() : slug;\n          \n          // Extract date\n          const dateMatch = content.match(/(\\w+ \\d+, \\d{4})/);\n          const date = dateMatch ? dateMatch[1] : 'Unknown date';\n          \n          // Extract description (subtitle)\n          const descriptionMatch = content.match(/<motion\\.h2[^>]*>([\\s\\S]*?)<\\/motion\\.h2>/);\n          const description = descriptionMatch ? descriptionMatch[1].trim() : '';\n          \n          // Extract icon\n          const iconMatch = content.match(/src=\"([^\"]+)\"/);\n          const icon = iconMatch ? iconMatch[1] : '/default-icon.jpg';\n          \n          posts.push({\n            slug,\n            title,\n            date,\n            description,\n            icon\n          });\n        }\n      } catch (err) {\n        console.error(`Error processing blog post ${slug}:`, err);\n      }\n    }\n    \n    // Sort posts by date (newest first)\n    posts.sort((a, b) => {\n      const dateA = new Date(a.date);\n      const dateB = new Date(b.date);\n      return dateB.getTime() - dateA.getTime();\n    });\n    \n    return NextResponse.json({ posts });\n  } catch (error) {\n    console.error('Error fetching blog posts:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch blog posts' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe;IACpB,IAAI;QACF,mCAAmC;QACnC,MAAM,iBAAiB,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;QAEhD,4DAA4D;QAC5D,MAAM,UAAU,6FAAA,CAAA,UAAE,CAAC,WAAW,CAAC,gBAAgB;YAAE,eAAe;QAAK;QACrE,MAAM,cAAc,QACjB,MAAM,CAAC,CAAA,QAAS,MAAM,WAAW,MAAM,MAAM,IAAI,KAAK,gBAAgB,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,MAC7F,GAAG,CAAC,CAAA,MAAO,IAAI,IAAI;QAEtB,oCAAoC;QACpC,MAAM,QAAQ,EAAE;QAEhB,mCAAmC;QACnC,KAAK,MAAM,QAAQ,YAAa;YAC9B,IAAI;gBACF,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,gBAAgB,MAAM;gBAEjD,2BAA2B;gBAC3B,IAAI,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,WAAW;oBAC3B,MAAM,UAAU,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;oBAE1C,gBAAgB;oBAChB,MAAM,aAAa,QAAQ,KAAK,CAAC;oBACjC,MAAM,QAAQ,aAAa,UAAU,CAAC,EAAE,CAAC,IAAI,KAAK;oBAElD,eAAe;oBACf,MAAM,YAAY,QAAQ,KAAK,CAAC;oBAChC,MAAM,OAAO,YAAY,SAAS,CAAC,EAAE,GAAG;oBAExC,iCAAiC;oBACjC,MAAM,mBAAmB,QAAQ,KAAK,CAAC;oBACvC,MAAM,cAAc,mBAAmB,gBAAgB,CAAC,EAAE,CAAC,IAAI,KAAK;oBAEpE,eAAe;oBACf,MAAM,YAAY,QAAQ,KAAK,CAAC;oBAChC,MAAM,OAAO,YAAY,SAAS,CAAC,EAAE,GAAG;oBAExC,MAAM,IAAI,CAAC;wBACT;wBACA;wBACA;wBACA;wBACA;oBACF;gBACF;YACF,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CAAC,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC,EAAE;YACvD;QACF;QAEA,oCAAoC;QACpC,MAAM,IAAI,CAAC,CAAC,GAAG;YACb,MAAM,QAAQ,IAAI,KAAK,EAAE,IAAI;YAC7B,MAAM,QAAQ,IAAI,KAAK,EAAE,IAAI;YAC7B,OAAO,MAAM,OAAO,KAAK,MAAM,OAAO;QACxC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAM;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
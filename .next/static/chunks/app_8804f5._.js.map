{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/robertzhang/Documents/GitHub/portfolio-website/app/components/Navbar.tsx"],"sourcesContent":["'use client';\n\nimport { usePathname } from 'next/navigation';\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nexport default function Navbar() {\n  const [lastScrollPos, setLastScrollPos] = useState(0);\n  const [visible, setVisible] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n\n  const pathname = usePathname();\n\n  const handleThemeToggle = () => {\n    setDarkMode((prev) => !prev);\n  };\n\n  useEffect(() => {\n    if (darkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [darkMode]);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const currentScrollPos = window.scrollY;\n      setVisible(currentScrollPos < lastScrollPos);\n      setLastScrollPos(currentScrollPos);\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [lastScrollPos]);\n\n  const navItems = [\n    { name: 'Home', href: '/' },\n    { name: 'About', href: '/about' },\n    { name: 'Projects', href: '/projects' },\n    { name: 'Blog', href: '/blog' },\n  ];\n\n  return (\n    <AnimatePresence>\n      {visible && (\n        <motion.header\n          className=\"fixed top-0 left-0 right-0 z-50 bg-transparent\"\n          initial={{ y: '-100%' }}\n          animate={{ y: 0 }}\n          exit={{ y: '-100%' }}\n          transition={{ duration: 0.3 }}\n        >\n          <div className=\"mx-auto flex h-16 max-w-[55%] items-center justify-between px-4\">\n            {/* Logo */}\n            <div className=\"flex items-center\">\n              <Link href=\"/\">\n                {/* Light Mode Logo */}\n                <img\n                  src=\"/rob-logo-light.svg\"\n                  alt=\"Rob Logo Light\"\n                  className=\"h-14 w-auto block dark:hidden\"\n                />\n                {/* Dark Mode Logo */}\n                <img\n                  src=\"/rob-logo-dark.svg\"\n                  alt=\"Rob Logo Dark\"\n                  className=\"h-14 w-auto hidden dark:block\"\n                />\n              </Link>\n            </div>\n\n            {/* Centered Nav Items */}\n            <nav className=\"hidden md:block\">\n              <ul className=\"flex space-x-8\">\n                {navItems.map((item) => {\n                  const isActive = pathname === item.href;\n                  return (\n                    <li key={item.name}>\n                      <Link\n                        href={item.href}\n                        className={\n                          isActive\n                            ? 'text-red-600 dark:text-red-600'\n                            : 'text-navy-800 dark:text-navy-200 hover:text-red-800 dark:hover:text-red-800'\n                        }\n                      >\n                        {item.name}\n                      </Link>\n                    </li>\n                  );\n                })}\n              </ul>\n            </nav>\n\n            {/* Theme Toggle (Moon Icon) */}\n            <button onClick={handleThemeToggle} className=\"focus:outline-none\">\n              <img\n                src={darkMode ? '/moon-dark.svg' : '/moon-light.svg'}\n                alt=\"Theme Toggle\"\n                className=\"h-6 w-6\"\n              />\n            </button>\n          </div>\n        </motion.header>\n      )}\n    </AnimatePresence>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AAAA;;;AALA;;;;;AAOe,SAAS;;IACtB,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACnD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEzC,MAAM,WAAW,CAAA,GAAA,qIAAA,CAAA,cAAW,AAAD;IAE3B,MAAM,oBAAoB;QACxB,YAAY,CAAC,OAAS,CAAC;IACzB;IAEA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;4BAAE;YACR,IAAI,UAAU;gBACZ,SAAS,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC;YACzC,OAAO;gBACL,SAAS,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC;YAC5C;QACF;2BAAG;QAAC;KAAS;IAEb,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;4BAAE;YACR,MAAM;iDAAe;oBACnB,MAAM,mBAAmB,OAAO,OAAO;oBACvC,WAAW,mBAAmB;oBAC9B,iBAAiB;gBACnB;;YAEA,OAAO,gBAAgB,CAAC,UAAU;YAClC;oCAAO,IAAM,OAAO,mBAAmB,CAAC,UAAU;;QACpD;2BAAG;QAAC;KAAc;IAElB,MAAM,WAAW;QACf;YAAE,MAAM;YAAQ,MAAM;QAAI;QAC1B;YAAE,MAAM;YAAS,MAAM;QAAS;QAChC;YAAE,MAAM;YAAY,MAAM;QAAY;QACtC;YAAE,MAAM;YAAQ,MAAM;QAAQ;KAC/B;IAED,qBACE,6LAAC,4LAAA,CAAA,kBAAe;kBACb,yBACC,6LAAC,6LAAA,CAAA,SAAM,CAAC,MAAM;YACZ,WAAU;YACV,SAAS;gBAAE,GAAG;YAAQ;YACtB,SAAS;gBAAE,GAAG;YAAE;YAChB,MAAM;gBAAE,GAAG;YAAQ;YACnB,YAAY;gBAAE,UAAU;YAAI;sBAE5B,cAAA,6LAAC;gBAAI,WAAU;;kCAEb,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC,+JAAA,CAAA,UAAI;4BAAC,MAAK;;8CAET,6LAAC;oCACC,KAAI;oCACJ,KAAI;oCACJ,WAAU;;;;;;8CAGZ,6LAAC;oCACC,KAAI;oCACJ,KAAI;oCACJ,WAAU;;;;;;;;;;;;;;;;;kCAMhB,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAG,WAAU;sCACX,SAAS,GAAG,CAAC,CAAC;gCACb,MAAM,WAAW,aAAa,KAAK,IAAI;gCACvC,qBACE,6LAAC;8CACC,cAAA,6LAAC,+JAAA,CAAA,UAAI;wCACH,MAAM,KAAK,IAAI;wCACf,WACE,WACI,mCACA;kDAGL,KAAK,IAAI;;;;;;mCATL,KAAK,IAAI;;;;;4BAatB;;;;;;;;;;;kCAKJ,6LAAC;wBAAO,SAAS;wBAAmB,WAAU;kCAC5C,cAAA,6LAAC;4BACC,KAAK,WAAW,mBAAmB;4BACnC,KAAI;4BACJ,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQ1B;GAtGwB;;QAKL,qIAAA,CAAA,cAAW;;;KALN"}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["file:///Users/robertzhang/Documents/GitHub/portfolio-website/app/ThemeContext.tsx"],"sourcesContent":["'use client';\nimport { createContext, useContext, useState, ReactNode } from 'react';\n\n// Define the context type\ntype ThemeContextType = {\n  darkMode: boolean;\n  toggleDarkMode: () => void;\n};\n\n// Create the context\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\n// Provider component\nexport const ThemeProvider = ({ children }: { children: ReactNode }) => {\n  const [darkMode, setDarkMode] = useState(false);\n\n  const toggleDarkMode = () => {\n    setDarkMode((prev) => !prev);\n    if (!darkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  };\n\n  return (\n    <ThemeContext.Provider value={{ darkMode, toggleDarkMode }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// Hook to use the theme context\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};"],"names":[],"mappings":";;;;;AACA;;;AADA;;AASA,qBAAqB;AACrB,MAAM,6BAAe,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAAgC;AAG1D,MAAM,gBAAgB,CAAC,EAAE,QAAQ,EAA2B;;IACjE,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEzC,MAAM,iBAAiB;QACrB,YAAY,CAAC,OAAS,CAAC;QACvB,IAAI,CAAC,UAAU;YACb,SAAS,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC;QACzC,OAAO;YACL,SAAS,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC;QAC5C;IACF;IAEA,qBACE,6LAAC,aAAa,QAAQ;QAAC,OAAO;YAAE;YAAU;QAAe;kBACtD;;;;;;AAGP;GAjBa;KAAA;AAoBN,MAAM,WAAW;;IACtB,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANa"}},
    {"offset": {"line": 264, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
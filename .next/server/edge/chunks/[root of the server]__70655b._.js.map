{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\nexport function middleware(request: NextRequest) {\n  // Clone the response\n  const response = NextResponse.next();\n  \n  // Add security headers\n  const securityHeaders = {\n    'X-Content-Type-Options': 'nosniff',\n    'X-Frame-Options': 'DENY',\n    'X-XSS-Protection': '1; mode=block',\n    'Referrer-Policy': 'strict-origin-when-cross-origin',\n    'Content-Security-Policy': \"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob:; font-src 'self'; connect-src 'self'\",\n    'Permissions-Policy': 'camera=(), microphone=(), geolocation=(), interest-cohort=()',\n  };\n  \n  // Set security headers\n  Object.entries(securityHeaders).forEach(([key, value]) => {\n    response.headers.set(key, value);\n  });\n  \n  return response;\n}\n\n// Only run middleware on admin and API routes\nexport const config = {\n  matcher: ['/admin/:path*', '/api/:path*'],\n}; "],"names":[],"mappings":";;;;AAAA;AAAA;;AAGO,SAAS,WAAW,OAAoB;IAC7C,qBAAqB;IACrB,MAAM,WAAW,qLAAA,CAAA,eAAY,CAAC,IAAI;IAElC,uBAAuB;IACvB,MAAM,kBAAkB;QACtB,0BAA0B;QAC1B,mBAAmB;QACnB,oBAAoB;QACpB,mBAAmB;QACnB,2BAA2B;QAC3B,sBAAsB;IACxB;IAEA,uBAAuB;IACvB,OAAO,OAAO,CAAC,iBAAiB,OAAO,CAAC,CAAC,CAAC,KAAK,MAAM;QACnD,SAAS,OAAO,CAAC,GAAG,CAAC,KAAK;IAC5B;IAEA,OAAO;AACT;AAGO,MAAM,SAAS;IACpB,SAAS;QAAC;QAAiB;KAAc;AAC3C"}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
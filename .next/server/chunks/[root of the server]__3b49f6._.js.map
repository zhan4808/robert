{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///Users/robertzhang/Documents/GitHub/robert/app/api/blog/delete/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport fs from 'fs';\nimport path from 'path';\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    // Get slug from query params\n    const { searchParams } = new URL(request.url);\n    const slug = searchParams.get('slug');\n    \n    if (!slug) {\n      return NextResponse.json(\n        { error: 'Blog slug is required' },\n        { status: 400 }\n      );\n    }\n    \n    // Path to the blog post directory\n    const blogDirectory = path.join(process.cwd(), 'app/blog', slug);\n    \n    // Check if directory exists\n    if (!fs.existsSync(blogDirectory)) {\n      return NextResponse.json(\n        { error: 'Blog post not found' },\n        { status: 404 }\n      );\n    }\n    \n    // Recursive function to delete directory contents\n    const deleteDirectory = (dirPath: string) => {\n      if (fs.existsSync(dirPath)) {\n        fs.readdirSync(dirPath).forEach((file) => {\n          const curPath = path.join(dirPath, file);\n          if (fs.lstatSync(curPath).isDirectory()) {\n            // Recurse\n            deleteDirectory(curPath);\n          } else {\n            // Delete file\n            fs.unlinkSync(curPath);\n          }\n        });\n        // Delete directory\n        fs.rmdirSync(dirPath);\n      }\n    };\n    \n    // Delete the blog post directory\n    deleteDirectory(blogDirectory);\n    \n    return NextResponse.json({ success: true, slug });\n  } catch (error) {\n    console.error('Error deleting blog post:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete blog post' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,OAAO,OAAoB;IAC/C,IAAI;QACF,6BAA6B;QAC7B,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,OAAO,aAAa,GAAG,CAAC;QAE9B,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwB,GACjC;gBAAE,QAAQ;YAAI;QAElB;QAEA,kCAAkC;QAClC,MAAM,gBAAgB,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,YAAY;QAE3D,4BAA4B;QAC5B,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,gBAAgB;YACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,kDAAkD;QAClD,MAAM,kBAAkB,CAAC;YACvB,IAAI,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,UAAU;gBAC1B,6FAAA,CAAA,UAAE,CAAC,WAAW,CAAC,SAAS,OAAO,CAAC,CAAC;oBAC/B,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,SAAS;oBACnC,IAAI,6FAAA,CAAA,UAAE,CAAC,SAAS,CAAC,SAAS,WAAW,IAAI;wBACvC,UAAU;wBACV,gBAAgB;oBAClB,OAAO;wBACL,cAAc;wBACd,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC;oBAChB;gBACF;gBACA,mBAAmB;gBACnB,6FAAA,CAAA,UAAE,CAAC,SAAS,CAAC;YACf;QACF;QAEA,iCAAiC;QACjC,gBAAgB;QAEhB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM;QAAK;IACjD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}